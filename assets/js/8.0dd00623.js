(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{281:function(t,s,a){"use strict";a.r(s);var e=a(14),n=Object(e.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"介绍"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#介绍"}},[t._v("#")]),t._v(" 介绍")]),t._v(" "),s("p",[t._v("之间我们了解了 "),s("code",[t._v("eslint")]),t._v(" 工具，它是用来检查我们 EcmaScript 的代码是否符合规范（当然它也可以配合插件完成对其他如 Vue、TypeScript 等检查）。在此基础上，我想你应该通过名字 "),s("code",[t._v("commitlint")]),t._v(" 猜到它的功能了。没错，"),s("code",[t._v("commitlint")]),t._v(" 就是用来对我们代码提交时的信息进行检查。")]),t._v(" "),s("p",[t._v("在没有使用 "),s("code",[t._v("commitlint")]),t._v(" 工具之前，我们提交代码时的信息可能是这样的")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" commit "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-m")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'新增了xxx'")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" commit "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-m")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'解决了xxx的缺陷'")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" commit "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-m")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'今日阳光明媚，今日多云转晴'")]),t._v("\n")])])]),s("p",[t._v("使用 "),s("code",[t._v("commitlint")]),t._v(" 工具之后，我们提交代码时的信息就是这样的")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" commit "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-m")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'feat: 新增 commitlint.config.js 配置文件'")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" commit "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-m")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'fix(route): 修复路径错误'")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" commit "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-m")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'style(README): 文案调整'")]),t._v("\n")])])]),s("p",[t._v("可以看到，使用 "),s("code",[t._v("commitlint")]),t._v(" 之后。我们可以通过提交信息和清晰的了解到这次提交的变更，拿 "),s("code",[t._v("fix(route): 修复路径错误")]),t._v(" 为例。"),s("code",[t._v("fix")]),t._v(" 表示我们这次提交是缺陷的修复，"),s("code",[t._v("(route)")]),t._v(" 表示我们这次修复的缺陷涉及到的模块在 route 中，最后 "),s("code",[t._v("修复路径错误")]),t._v(" 为导致我们这次缺陷的原因。")]),t._v(" "),s("p",[t._v("通过 "),s("code",[t._v("commitlint")]),t._v(" 和提交规范我们可以很好的约束其他人的提交信息，便于理解他这次提交变更了那些内容。这在协同开发中是非常有用的。")]),t._v(" "),s("h2",{attrs:{id:"安装"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#安装"}},[t._v("#")]),t._v(" 安装")]),t._v(" "),s("h3",{attrs:{id:"本地安装"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#本地安装"}},[t._v("#")]),t._v(" 本地安装")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("npm")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("install")]),t._v(" --save-dev @commitlint/config-conventional @commitlint/cli\n")])])]),s("h3",{attrs:{id:"新增配置文件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#新增配置文件"}},[t._v("#")]),t._v(" 新增配置文件")]),t._v(" "),s("p",[t._v("与 "),s("code",[t._v("eslint")]),t._v(" 一样，"),s("code",[t._v("commitlint")]),t._v(" 同样也需要一个配置文件告诉它该以什么样的规范去检查我们的提交信息。")]),t._v(" "),s("p",[t._v("commitlint.config.js")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("module"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("exports "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'@commitlint/config-conventional'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("通过以上配置，"),s("code",[t._v("commitlint")]),t._v(" 便会以 "),s("code",[t._v("conventional commits")]),t._v(" 规范进行校验，如果提交信息不符合常规的提交规范，那么此次提交将会失败。如果你想了解更多关于常规规范的内容，可以阅读 "),s("a",{attrs:{href:"https://www.conventionalcommits.org/en/v1.0.0/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Conventional Commits"),s("OutboundLink")],1)]),t._v(" "),s("h2",{attrs:{id:"使用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用"}},[t._v("#")]),t._v(" 使用")]),t._v(" "),s("p",[t._v("通过前面我们可以了解到 "),s("code",[t._v("commitlint")]),t._v(" 是用来检查我们提交信息是否符合规范，那它检查的时机必定是在我们提交信息 时执行。这时我们肯定第一时间想到 "),s("code",[t._v("git hooks")]),t._v("，它会在特定的时间执行。我们可以通过访问隐藏文件 "),s("code",[t._v(".git")]),t._v(" 来查看到所有的 "),s("code",[t._v("git hooks")]),t._v("。")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("cd")]),t._v(" yourproject\n"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("cd")]),t._v(" .git/hooks/\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("ls")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# result")]),t._v("\napplypatch-msg.sample           pre-push.sample\ncommit-msg.sample               pre-rebase.sample\nfsmonitor-watchman.sample       pre-receive.sample\npost-update.sample              prepare-commit-msg.sample\npre-applypatch.sample           push-to-checkout.sample\npre-commit.sample               update.sample\npre-merge-commit.sample\n")])])]),s("p",[t._v("我们可以通过修改这些脚本文件使得 "),s("code",[t._v("commitlint")]),t._v(" 能在信息提交时执行，但这样是愚蠢的。因为不是所有的开发者都擅长脚本编写，并且这些脚本文件在 "),s("code",[t._v(".git")]),t._v(" 文件中，它属于隐藏文件。我们不可能通过此方式去完成提交信息的检查。令人庆幸的是，npm 库中存在这么一个工具 "),s("code",[t._v("husky")]),t._v("。它支持所有的 "),s("code",[t._v("git hooks")]),t._v("，通过它我们便可以在修改隐藏文件 "),s("code",[t._v(".git")]),t._v(" 的情况下使用 "),s("code",[t._v("git hooks")]),t._v("。")]),t._v(" "),s("h4",{attrs:{id:"安装-husky"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#安装-husky"}},[t._v("#")]),t._v(" 安装 husky")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("npm")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("install")]),t._v(" husky --save-dev\n")])])]),s("p",[t._v("启用 git hooks")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("npx husky "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("install")]),t._v("\n")])])]),s("p",[t._v("package.json 在项目安装依赖前需要启用 git hooks，这在协同开发中很重要，如果你不了解 "),s("code",[t._v("preare")]),t._v("，可以同构查看 "),s("a",{attrs:{href:"https://docs.npmjs.com/cli/v7/using-npm/scripts",target:"_blank",rel:"noopener noreferrer"}},[t._v("npm docs"),s("OutboundLink")],1),t._v(" 进行了解")]),t._v(" "),s("div",{staticClass:"language-json extra-class"},[s("pre",{pre:!0,attrs:{class:"language-json"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"scripts"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"prepare"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"husky install"')]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("新增 "),s("code",[t._v("git hooks")]),t._v(" 中的 "),s("code",[t._v("commit-msg")]),t._v(" 钩子，并在这个钩子中执行 "),s("code",[t._v("commitlint")]),t._v(" 进行提交信息检查")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("npx husky "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" .husky/commit-msg  "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'npx --no -- commitlint --edit ${1}'")]),t._v("\n")])])]),s("p",[t._v("到此我们便完成了 "),s("code",[t._v("commitlint")]),t._v(" 的所有配置")]),t._v(" "),s("h2",{attrs:{id:"测试"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#测试"}},[t._v("#")]),t._v(" 测试")]),t._v(" "),s("p",[t._v("首先我们新增一个 "),s("code",[t._v("test.js")]),t._v(" 文件")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("touch")]),t._v(" test.js\n")])])]),s("p",[t._v("将它添加到暂存区")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(".")]),t._v("\n")])])]),s("p",[t._v("最后提交到仓库，这里我们随意使用一个提交信息")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" commit "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-m")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'新增了一个 test.js 文件'")]),t._v("\n")])])]),s("p",[t._v("命令行结果")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("⧗   input: 新增了一个 test.js 文件\n✖   subject may not be empty "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("subject-empty"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n✖   "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("type")]),t._v(" may not be empty "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("type-empty"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n✖   found "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" problems, "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" warnings\nⓘ   Get help: https://github.com/conventional-changelog/commitlint/"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#what-is-commitlint")]),t._v("\n\nhusky - commit-msg hook exited with code "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("error"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("按规范提交")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" commit "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-m")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'feat(global): 新增一个 test.js 文件'")]),t._v("\n")])])]),s("p",[t._v("命令行结果")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("master 557f558"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" feat"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("global"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(": 新增一个 test.js 文件\n "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("file")]),t._v(" changed, "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" insertions"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("+"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(", "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" deletions"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("-"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n create mode "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("100644")]),t._v(" test.js\n")])])])])}),[],!1,null,null,null);s.default=n.exports}}]);