(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{292:function(t,s,e){"use strict";e.r(s);var a=e(14),r=Object(a.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"介绍"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#介绍"}},[t._v("#")]),t._v(" 介绍")]),t._v(" "),s("p",[s("code",[t._v("eslint")]),t._v(" 是用来对我们代码规范进行检查，而 "),s("code",[t._v("prettier")]),t._v(" 是用来给我们的代码进行格式化。所以我们可以将二者配合起来，就可以实现 "),s("code",[t._v("eslint")]),t._v(" 代码检查、"),s("code",[t._v("prettier")]),t._v(" 代码格式化。但这期间会有一个问题，我们知道 "),s("code",[t._v("eslint")]),t._v(" 中的规则分为 "),s("code",[t._v("Possible Problems")]),t._v("、"),s("code",[t._v("Suggestions")]),t._v("、"),s("code",[t._v("Layout & Formatting")]),t._v(" 这几类，其中 "),s("code",[t._v("Layout & Formatting")]),t._v(" 这一块很容易会与 "),s("code",[t._v("prettier")]),t._v(" 格式化规范发生冲突。"),s("code",[t._v("prettier")]),t._v(" 是自以为是的。为此，"),s("code",[t._v("prettier")]),t._v(" 官方提供了 "),s("code",[t._v("eslint-config-prettier")]),t._v(" 配置，它会将 "),s("code",[t._v("eslint")]),t._v(" 中与 "),s("code",[t._v("prettier")]),t._v(" 中冲突的规则给禁用掉。这样我们便可以同时使用 "),s("code",[t._v("eslint")]),t._v(" 的代码检查和 "),s("code",[t._v("prettier")]),t._v(" 的格式化 🎉。")]),t._v(" "),s("h2",{attrs:{id:"安装及配置"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#安装及配置"}},[t._v("#")]),t._v(" 安装及配置")]),t._v(" "),s("h4",{attrs:{id:"安装"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#安装"}},[t._v("#")]),t._v(" 安装")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("npm")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("install")]),t._v(" --save-dev eslint-config-prettier\n")])])]),s("h4",{attrs:{id:"配置"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#配置"}},[t._v("#")]),t._v(" 配置")]),t._v(" "),s("p",[t._v(".eslintrc.json")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token string-property property"}},[t._v('"extends"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"some-other-config-you-use"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"prettier"')]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),s("p",[t._v("eslint 加载扩展的规则时，如果发生冲突，后面的规则会覆盖掉前面的规则。所以 "),s("code",[t._v("prettier")]),t._v(" 扩展配置必须放到所有扩展配置的最后面。")])])])}),[],!1,null,null,null);s.default=r.exports}}]);