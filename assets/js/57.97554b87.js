(window.webpackJsonp=window.webpackJsonp||[]).push([[57],{339:function(t,s,a){"use strict";a.r(s);var n=a(14),r=Object(n.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"基本数据类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#基本数据类型"}},[t._v("#")]),t._v(" 基本数据类型")]),t._v(" "),s("h4",{attrs:{id:"整形"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#整形"}},[t._v("#")]),t._v(" 整形")]),t._v(" "),s("p",[t._v("int （根据操作系统的位数分配，32位操作系统int为32位，反之64位操作系统 ）\nint8 int16 int32 int64（有符号 +-）\nuint8 uint16 uint32 uint64")]),t._v(" "),s("p",[t._v("不同类型的整形不能进行计算，需要转化成同一类型才可以进行计算")]),t._v(" "),s("div",{staticClass:"language-go extra-class"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int8")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" b "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int16")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 报错")]),t._v("\nfmt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" \n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ✅")]),t._v("\nfmt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("int16")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("h4",{attrs:{id:"浮点型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#浮点型"}},[t._v("#")]),t._v(" 浮点型")]),t._v(" "),s("p",[t._v("float32\nfloat64")]),t._v(" "),s("p",[t._v("类型推导出来的类型默认是根据操作系统位数")]),t._v(" "),s("p",[t._v("双精度浮点数 同样存在精度丢失问题")]),t._v(" "),s("p",[t._v("int 类型的值可以通过 float32 和 float64 方法转化成 float 类型")]),t._v(" "),s("p",[t._v("与 js 不同 go 中的布尔类型不允许与数值进行计算，也不能进行类型转换（其他类型同样不能转化成布尔类型）")]),t._v(" "),s("h4",{attrs:{id:"字符串类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#字符串类型"}},[t._v("#")]),t._v(" 字符串类型")]),t._v(" "),s("p",[t._v("转义字符")]),t._v(" "),s("p",[t._v("\\r 回车\n\\n 换行\n\\t 制表符\n' 单引号\n\" 双引号\n\\ 反斜杠"),s("br"),t._v("\n多行字符串和 js 一样 用反引号")]),t._v(" "),s("p",[s("strong",[t._v("字符串常用方法")])]),t._v(" "),s("ul",[s("li",[t._v("len(str) 返回字符串字节长度（英文1 中文3）")]),t._v(" "),s("li",[t._v("fmt.Sprintf 拼接字符串 "),s("code",[t._v('fmt.Sprintf("%v %v", a, b)')])]),t._v(" "),s("li",[t._v("strings.Split 分割字符串（返回切片 类似数组）")]),t._v(" "),s("li",[t._v("strings.Join 切片转化成字符")]),t._v(" "),s("li",[t._v("strings.Contains 字符串中是否包含某个字符")]),t._v(" "),s("li",[t._v("strings.HasPrefix 字符串以什么开头（前缀）")]),t._v(" "),s("li",[t._v("strings.HasSuffix 字符串以什么结尾（后缀）")]),t._v(" "),s("li",[t._v("strings.Index 返回索引（从前往后）查不到返回 -1")]),t._v(" "),s("li",[t._v("strings.LastIndex 返回索引（从后往前）")])]),t._v(" "),s("h4",{attrs:{id:"字符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#字符"}},[t._v("#")]),t._v(" 字符")]),t._v(" "),s("p",[t._v("在 go 中，字符分为字符 和 字符串，字符属于 int 类型，声明它通过单引号声明，且它有且只有一个字符。")]),t._v(" "),s("p",[t._v("字符存在两种类型 byte 和 rune")]),t._v(" "),s("ul",[s("li",[t._v("uint8 byte ASCII字符")]),t._v(" "),s("li",[t._v("rune UTF-8字符")])]),t._v(" "),s("p",[t._v("在 go 中 for 循环循环的是 byte 类型，也就是说循环是循环字节\nfor range 循环的是 rune 类型")]),t._v(" "),s("div",{staticClass:"language-go extra-class"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" b "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token char"}},[t._v("'b'")]),t._v("\n")])])]),s("h4",{attrs:{id:"类型的转化"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#类型的转化"}},[t._v("#")]),t._v(" 类型的转化")]),t._v(" "),s("p",[t._v("数值转换（int => int float => float int => float）")]),t._v(" "),s("p",[t._v("其他类型转字符串类型\nfmt.Sprintf 拼接字符串转化成字符")]),t._v(" "),s("p",[t._v("通过 strconv 包进行转化")]),t._v(" "),s("ul",[s("li",[t._v("strconv.FormatInt")]),t._v(" "),s("li",[t._v("strconv.FormatFloat")]),t._v(" "),s("li",[t._v("strconv.FormatBool")]),t._v(" "),s("li",[t._v("strconv.FormatUint 字符")])]),t._v(" "),s("p",[t._v("string => int")]),t._v(" "),s("ul",[s("li",[t._v("strconv.ParseInt")]),t._v(" "),s("li",[t._v("strconv.ParseFloat")]),t._v(" "),s("li",[t._v('strconv.ParseBool （"true" 返回 true，和 js 不同的是不是非空为 true）')])])])}),[],!1,null,null,null);s.default=r.exports}}]);