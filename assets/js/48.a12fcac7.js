(window.webpackJsonp=window.webpackJsonp||[]).push([[48],{390:function(t,e,s){"use strict";s.r(e);var a=s(25),r=Object(a.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h2",{attrs:{id:"介绍"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#介绍"}},[t._v("#")]),t._v(" 介绍")]),t._v(" "),e("p",[t._v("prettier 是一款自以为是的代码格式化程序。")]),t._v(" "),e("p",[t._v("以上是来自 "),e("code",[t._v("prettier")]),t._v(" 官方给出的定义，之所以说它是自以为是的格式化。是因为它几乎完全按照自己的定制的规则去进行代码的格式化。如果你想按照自己的意愿去格式化，对不起，"),e("code",[t._v("prettier")]),t._v(" 可能不太适合你（大笑）。")]),t._v(" "),e("p",[t._v("优点：")]),t._v(" "),e("ul",[e("li",[t._v("开箱即用，使用简单，几乎不需要任何配置")]),t._v(" "),e("li",[t._v("统一了前端格式化")]),t._v(" "),e("li",[t._v("开发者无需再关心如何格式化自己的代码（就像乔布斯每天穿同样的衣服一样，面对每天数百个决定，不应该把时间花在怎么穿会让我更好看这件事上）")])]),t._v(" "),e("h2",{attrs:{id:"安装使用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#安装使用"}},[t._v("#")]),t._v(" 安装使用")]),t._v(" "),e("h4",{attrs:{id:"安装"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#安装"}},[t._v("#")]),t._v(" 安装")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("npm")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("install")]),t._v(" --save-dev --save-exact prettier\n")])])]),e("p",[t._v("如果你细心观察你会发现，这里我们使用的是 "),e("code",[t._v("--save-exact")]),t._v("。如果你不太了解它的含义，可以通过查阅 "),e("a",{attrs:{href:"https://docs.npmjs.com/cli/v6/commands/npm-install",target:"_blank",rel:"noopener noreferrer"}},[t._v("npm Docs"),e("OutboundLink")],1),t._v("进行了解。为了你的阅读体验，这里你只需要知道如果加上它，你安装的 "),e("code",[t._v("prettier")]),t._v(" 将会是一个固定版本。")]),t._v(" "),e("p",[t._v("之所以要这么做，我想你应该也猜到了。正如我们前面所说的那样，"),e("code",[t._v("prettier")]),t._v(" 是个自以为是的格式化程序。我们的代码如何格式化几乎都是它自己说了算。我想谁都不会想因为 "),e("code",[t._v("prettier")]),t._v(" 的版本变化而影响到自己代码的格式化方式。")]),t._v(" "),e("h4",{attrs:{id:"使用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#使用"}},[t._v("#")]),t._v(" 使用")]),t._v(" "),e("p",[t._v("格式化目标文件")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[t._v("npx prettier "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("filepath"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--write")]),t._v("\n")])])]),e("p",[t._v("格式化所有文件")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[t._v("npx prettier "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(".")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--write")]),t._v("\n")])])]),e("p",[t._v("检查出没有被 "),e("code",[t._v("prettier")]),t._v(" 格式化的文件")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[t._v("npx prettier "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(".")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--check")]),t._v("\n")])])]),e("h2",{attrs:{id:"配置"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#配置"}},[t._v("#")]),t._v(" 配置")]),t._v(" "),e("h4",{attrs:{id:"配置文件格式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#配置文件格式"}},[t._v("#")]),t._v(" 配置文件格式")]),t._v(" "),e("p",[t._v("虽然 "),e("code",[t._v("prettier")]),t._v(" 的配置文件支持多种不同格式，但是这里我推荐使用 "),e("code",[t._v(".prettierrc.js")]),t._v("。作为一个前端开发人员，js 对我们有着先天的亲和感。除此之外它配合 "),e("code",[t._v('/** @type {import("prettier").Options} */')]),t._v(" 和 vs code 能够得到一个很好的语法提示。如果你执意想使用其他格式的配置文件，那你可以自行阅读 "),e("a",{attrs:{href:"https://prettier.io/docs/en/configuration.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("prettier docs"),e("OutboundLink")],1),t._v(" 了解更多格式以及它们加载的优先级。")]),t._v(" "),e("p",[e("code",[t._v(".prettierrc.js")]),t._v(" 示例")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v('/** @type {import("prettier").Options} */')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" config "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("trailingComma")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'es5'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("tabWidth")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("semi")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("singleQuote")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\nmodule"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("exports "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" config\n")])])]),e("p",[e("code",[t._v("prettier")]),t._v(" 在格式化代码过程中会根据我们定义的配置文件中的规则去格式化我们的代码，如果没有配置文件便会通过默认的规则进行格式化。虽然前面有说过 "),e("code",[t._v("prettier")]),t._v(" 是自以为是的，但是它还是给我们暴露了一些配置使得我们能够实现一些个性化需求。")]),t._v(" "),e("h4",{attrs:{id:"配置项"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#配置项"}},[t._v("#")]),t._v(" 配置项")]),t._v(" "),e("p",[t._v("常见的配置项：")]),t._v(" "),e("ul",[e("li",[t._v("printWidth 代码的最大宽度（默认 80）")]),t._v(" "),e("li",[t._v("tabWidth 缩紧，一个 tab 的宽度（默认 2）")]),t._v(" "),e("li",[t._v("semi 末尾分号（默认为 true）")]),t._v(" "),e("li",[t._v("singleQuote 字符使用单引号（默认是 false）")]),t._v(" "),e("li",[t._v("...")])]),t._v(" "),e("p",[t._v("如果你想了解跟多配置项，可以查阅 "),e("a",{attrs:{href:"https://prettier.io/docs/en/options.html#file-path",target:"_blank",rel:"noopener noreferrer"}},[t._v("prettier docs"),e("OutboundLink")],1)]),t._v(" "),e("h4",{attrs:{id:"忽略文件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#忽略文件"}},[t._v("#")]),t._v(" 忽略文件")]),t._v(" "),e("p",[t._v("我们日常开发中不可能将所有的代码都进行格式化，那将是相当愚蠢的。"),e("code",[t._v("prettier")]),t._v(" 当然也想到了这点，你可以通过新增一个 "),e("code",[t._v(".prettierignore")]),t._v(" 文件来告诉 "),e("code",[t._v("prettier")]),t._v(" 忽略那些文件。在默认情况下，"),e("code",[t._v("prettier")]),t._v(" 会忽略一下目录中的文件。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("**/.git\n**/.svn\n**/.hg\n**/node_modules\n")])])]),e("p",[t._v("除此之外，你也可以通过代码注释的方式对局部代码进行格式化的忽略。")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// prettier-ignore")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("matrix")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),e("p",[t._v("如果你还想了解更多关于局部忽略的方式，可以阅读 "),e("a",{attrs:{href:"https://prettier.io/docs/en/ignore.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("prettier docs"),e("OutboundLink")],1)]),t._v(" "),e("h2",{attrs:{id:"集成-vs-code"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#集成-vs-code"}},[t._v("#")]),t._v(" 集成（Vs Code）")]),t._v(" "),e("p",[t._v("虽然 "),e("code",[t._v("prettier")]),t._v(" 给我们提供了命令行工具，让我们能够通过命令的方式对我们的代码进行格式化。但对于开发来说这也是相当鸡肋的。想象一下，如果我们每次写完代码都需要进入命令行中输入命令才能完成代码的格式化，这是一件多么令人悲痛的事情。如果能够在保存的时候就自动执行 "),e("code",[t._v("prettier")]),t._v(" 进行代码的格式化，那是不是令人兴奋。")]),t._v(" "),e("h4",{attrs:{id:"安装-vs-code-插件-prettier"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#安装-vs-code-插件-prettier"}},[t._v("#")]),t._v(" 安装 vs code 插件（prettier）")]),t._v(" "),e("p",[t._v("我们可以在 vs code 插件商店中找到 "),e("code",[t._v("prettier")]),t._v(" 插件进行安装，安装完成之后重启一下 vs code。然后将 vs code 的默认格式化工具改为 "),e("code",[t._v("prettier")]),t._v("，并且在保存时自动进行格式化。这样在每次保存时 vs code 插件 "),e("code",[t._v("prettier")]),t._v(" 就会对我们的代码进行格式化。")]),t._v(" "),e("p",[t._v("插件 "),e("code",[t._v("prettier")]),t._v(" 运行原理：")]),t._v(" "),e("p",[t._v("首先它内置了一套自己的 "),e("code",[t._v("prettier")]),t._v(" 格式化规则，并且也对应一个自己的版本。如果我们的项目中不存在 "),e("code",[t._v("prettier")]),t._v("\n的包，并且也存在 "),e("code",[t._v(".prettierrc.js")]),t._v(" 配置文件。那么它将以最新的 "),e("code",[t._v("prettier")]),t._v(" 和内置的配置进行代码格式化。如果你仅仅是为了实验一下 "),e("code",[t._v("prettier")]),t._v(" 功能，你可以这样做。但如果你的项目是协同开发，推荐在项目本地安装固定版本的 "),e("code",[t._v("prettier")]),t._v(" 和增加对应的配置文件。这样插件在运行时就会按照你项目中的 "),e("code",[t._v("prettier")]),t._v("版本及配置进行代码的格式化。")])])}),[],!1,null,null,null);e.default=r.exports}}]);